MY_VIRTUALENV_NAMES=${MY_VIRTUALENV_NAMES:-.venv}
DETECT_VIRTUALENV_STATUS=on

function abs_path_readlink() {
    readlink --canonicalize "$1"
}

function abs_path_perl() {
    perl -MCwd=abs_path -e'print abs_path(shift)' "$1"
}

if abs_path_readlink >/dev/null 2>&1
then
    function abs_path() {
        abs_path_readlink $@
    }
else
    function abs_path() {
        abs_path_perl $@
    }
fi

function ancestors_of() {
    local dir=$( abs_path "${1:-.}" )
    local last
    while [ "$dir" != "$last" ]
    do
        printf "%s\0" "${dir%/}/"
        last="$dir"
        dir=$( dirname "$dir" )
    done
}

function match_parent() {
    # ancestors_of /foo/bar/baz | match_parent /foo/bie
    #   /foo/bie
    [ -z "$1" ] && return
    ancestor_parent="$( dirname "$1" )"
    while read -r -d '' parent
    do
        if [ "$parent" = "${ancestor_parent%/}/" ]
        then
            printf "%s\0" "$1"
            break
        fi
    done
}

function find_dir_in_parents() {
    local needle=$1
    test -n "$needle" || return
    # might be the current virtualenv, which is an absolute path
    local needle_dir=$( dirname "$needle" )

    local look=$( abs_path ${2:-.} )
    test -d "$look" || return

    while [ "$( dirname "$look" )" != "$look" ]
    do
        if [ "$( builtin cd "$look"; abs_path $needle_dir )" = "$look" ]
        then
            local candidate=$look/${needle#$look/}
            test -d "$candidate" && echo $candidate && break
        fi
        look=$( dirname "$look" )
    done
}

function switch_virtualenvs() {
    local new="$1"
    [ "$VIRTUAL_ENV" = "$new" ] && return
    [ -n "${VIRTUAL_ENV+virtualenv active}" ] && deactivate
    local activate="$new/bin/activate"
    test -e "$activate" && source "$activate"
    true
}

function status_should_be() {
    case "$1" in
        status) echo ${DETECT_VIRTUALENV_STATUS-on} ;;
        on)  unset  DETECT_VIRTUALENV_STATUS     ;;
        off) export DETECT_VIRTUALENV_STATUS=off ;;
        deactivate) status_should_be off; switch_virtualenvs;;
        toggle)
            if [ "$DETECT_VIRTUALENV_STATUS" = "off" ]
            then
                status_should_be on
            else
                status_should_be off
            fi
        ;;
    esac
}

function detect_virtualenv() {
    local -a args=()
    while [ "$#" -gt 0 ]
    do
        local arg="$1"; shift
        if [ "${arg#--}" != "$arg" ]
        then
            status_should_be "${arg#--}"
        else
            args=("${args[@]}" "$arg")
        fi
    done

    if [ "${DETECT_VIRTUALENV_STATUS-on}" != "on" ]
    then
        return
    fi

    local names=${args[0]:-$MY_VIRTUALENV_NAMES}
    IFS=':' read -ra dirs <<< "${VIRTUAL_ENV:+$VIRTUAL_ENV:}$names"
    local found
    for dir in "${dirs[@]}"
    do
        local found=$( find_dir_in_parents "$dir" )
        [ -n "$found" ] && break
    done
    switch_virtualenvs "$found"
}

function detect_virtualenv_on_prompt() {
  if [ "${PROMPT_COMMAND/detect_virtualenv//}" = "$PROMPT_COMMAND" ] ; then
    export PROMPT_COMMAND="detect_virtualenv${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
  fi
}

if [ $# -gt 0 ]
then
  case $1 in
    on_prompt) shift; detect_virtualenv_on_prompt ;;
  esac
fi

if [ $# -gt 0 ]
then
  echo detect_virtualenv: ignoring unknown parameters: $@ >&2
fi

# vim: ft=sh
